<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_VisuEventsHandling" Id="{50ed088d-9a7d-4c16-86a9-e90b487e4982}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_VisuEventsHandling EXTENDS FB_ListenerBase
VAR
	arrEvents				: ARRAY[1..iMAX_EVENTS] OF ST_Event;		//Dla HMI (* *)
	arrActiveAlarms			: ARRAY[1..iMAX_EVENTS] OF ST_Event;		//Dla HMI (*  *)
	arrActiveEvents			: ARRAY[1..iMAX_DEFINITION_EVENTS] OF ST_BaseEvent;	(*  *)
	
	iActiveDefinitionEvents	: UDINT;	(* zajetosc tabeli arrActiveEvents *)
	iActiveAlarms			: UDINT;	(* Zajetosc tabeli alarmow *)
	
	iActiveCritical			: UDINT;	(*  *)
	iActiveError			: UDINT;	(*  *)
	iActiveWarning			: UDINT;	(*  *)
	iActiveInfo				: UDINT;	(*  *)
	iActiveVerbose			: UDINT;	(*  *)
	
	bSummertime				: BOOL;		(*  *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Execute();]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{3c7f655d-2c73-41dc-b085-26c5a3b1cef1}">
      <Declaration><![CDATA[METHOD Execute : HRESULT
VAR_INPUT
END_VAR
VAR_INST
	fbRequestEventText  : FB_RequestEventText;
	stBaseEvent 		: ST_BaseEvent;
	bReqText 			: BOOL;
	{attribute 'TcEncoding':='UTF-8'}
	sLastMessageText 	: STRING;
	index				: udint;
END_VAR
VAR
	rtAlarmCleard : R_TRIG;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute := SUPER^.Execute(); //retrieve events

IF iActiveDefinitionEvents > 0 AND bReqText = FALSE THEN
	stBaseEvent := arrActiveEvents[iActiveDefinitionEvents];
	fbRequestEventText.Request(eventClass:=stBaseEvent.guidEventClass, nEventId:=stBaseEvent.iEventId, nLangId := Tc3_EventLogger.GVL.nLangId_OnlineMonitoring, ipArgs:=stBaseEvent.iTcArguments);
	MEMSET(ADR(arrActiveEvents[iActiveDefinitionEvents]),0,SIZEOF(arrActiveEvents[iActiveDefinitionEvents]));
	iActiveDefinitionEvents := iActiveDefinitionEvents - 1;
	bReqText := TRUE;
END_IF

//retrieve the text of a message
IF 	bReqText AND fbRequestEventText.bError THEN 
	sLastMessageText := 'Error';
	bReqText := FALSE;
ELSIF bReqText AND NOT fbRequestEventText.bBusy THEN
	rtAlarmCleard(CLK := stBaseEvent.eEventType = E_EventType.ALARM_CLEARED); //RMA
	IF stBaseEvent.eEventType = E_EventType.MESSAGE OR stBaseEvent.eEventType = E_EventType.ALARM_RAISED THEN
		MEMCPY(ADR(arrEvents[2]),ADR(arrEvents[1]),SIZEOF(arrEvents[1]) * (iMAX_EVENTS - 1));
		fbRequestEventText.GetString(sLastMessageText, SIZEOF(sLastMessageText));
		arrEvents[1].iType := stBaseEvent.iType;
		arrEvents[1].eSeverity := stBaseEvent.eSeverity;
		arrEvents[1].iEventId := stBaseEvent.iEventId;
		arrEvents[1].guidEventClass := stBaseEvent.guidEventClass;
		arrEvents[1].sSourceName := stBaseEvent.sSourceName;
		arrEvents[1].iSourceID := stBaseEvent.iSourceID;
		//arrEvents[1].nTimeStamp := ULINT_TO_DT(stBaseEvent.nTimeStamp/10000000 - 11644473600); //100ns -> s - 1601.01.01:00:00:00
		arrEvents[1].iTimeStamp := stBaseEvent.iTimeStamp/10000 - 11644473600000; //100ns to ms -> /1000
		arrEvents[1].iTimeStampCleared := 0; //100ns to ms -> /1000
		arrEvents[1].iTimeStampConfirmed :=0; //100ns to ms -> /1000
		IF NOT bSummertime THEN
			arrEvents[1].iTimeStamp := arrEvents[1].iTimeStamp + 3600000;
		END_IF
		UTF8_TO_STRING(pDstSTRING:=ADR(arrEvents[1].sEventText), pSrcUTF8:=ADR(sLastMessageText), nDstSize:=SIZEOF(arrEvents[1].sEventText), nDstLen=> );
		IF LEN2(ADR(stBaseEvent.sJsonAttribute)) > 0 THEN
			//arrEvents[1].wsJsonAttribute := stBaseEvent.wsJsonAttribute;
			FindAndReplaceChar(
				pSrcString:= ADR(stBaseEvent.sJsonAttribute), 
				sDeleteChar:= '"', 
				sInsertChar:= '', 
				pDstString:= ADR(arrEvents[1].sJsonAttribute), 
				nDstSize:= LEN2(ADR(stBaseEvent.sJsonAttribute)));
			FindAndReplaceChar(
				pSrcString:= ADR(arrEvents[1].sJsonAttribute), 
				sDeleteChar:= ':', 
				sInsertChar:= '$T', 
				pDstString:= ADR(arrEvents[1].sJsonAttribute), 
				nDstSize:= LEN2(ADR(arrEvents[1].sJsonAttribute)));
			FindAndReplaceChar(
				pSrcString:= ADR(arrEvents[1].sJsonAttribute), 
				sDeleteChar:= ',', 
				sInsertChar:= '$N', 
				pDstString:= ADR(arrEvents[1].sJsonAttribute), 
				nDstSize:= LEN2(ADR(arrEvents[1].sJsonAttribute)));
			FindAndReplaceChar(
				pSrcString:= ADR(arrEvents[1].sJsonAttribute), 
				sDeleteChar:= '{', 
				sInsertChar:= '', 
				pDstString:= ADR(arrEvents[1].sJsonAttribute), 
				nDstSize:= LEN2(ADR(arrEvents[1].sJsonAttribute)));
			FindAndReplaceChar(
				pSrcString:= ADR(arrEvents[1].sJsonAttribute), 
				sDeleteChar:= '}', 
				sInsertChar:= '', 
				pDstString:= ADR(arrEvents[1].sJsonAttribute), 
				nDstSize:= LEN2(ADR(arrEvents[1].sJsonAttribute)));							
		END_IF	
		arrEvents[1].sEventText := arrEvents[1].sEventText;
		//aktywne alarmy
		IF stBaseEvent.eEventType = E_EventType.ALARM_RAISED THEN
			MEMCPY(ADR(arrActiveAlarms[2]),ADR(arrActiveAlarms[1]),SIZEOF(arrActiveAlarms[1]) * (iMAX_EVENTS - 1));
			arrActiveAlarms[1].iType 			:= arrEvents[1].iType;
			arrActiveAlarms[1].eSeverity 		:= arrEvents[1].eSeverity;
			arrActiveAlarms[1].iEventId 		:= arrEvents[1].iEventId;
			arrActiveAlarms[1].iTimeStamp 		:= arrEvents[1].iTimeStamp;
			arrActiveAlarms[1].sEventText 		:= arrEvents[1].sEventText;
			arrActiveAlarms[1].sJsonAttribute 	:= arrEvents[1].sJsonAttribute;
			arrActiveAlarms[1].guidEventClass 	:= arrEvents[1].guidEventClass;
			arrActiveAlarms[1].sSourceName 		:= arrEvents[1].sSourceName;
			arrActiveAlarms[1].iSourceID 		:= arrEvents[1].iSourceID;
			arrActiveAlarms[1].iTimeStampCleared := arrEvents[1].iTimeStampCleared;
			arrActiveAlarms[1].iTimeStampConfirmed := arrEvents[1].iTimeStampConfirmed;
			IF iActiveAlarms < iMAX_EVENTS THEN
				iActiveAlarms := iActiveAlarms + 1;
			END_IF
		END_IF
	ELSIF rtAlarmCleard.Q THEN
		//alarmy aktywne
		FOR index := 1 TO iActiveAlarms DO
			IF  GuidsEqualByVal(stBaseEvent.guidEventClass, arrActiveAlarms[index].guidEventClass) AND
				stBaseEvent.iEventId = arrActiveAlarms[index].iEventId AND 
				stBaseEvent.sSourceName = arrActiveAlarms[index].sSourceName AND 
				stBaseEvent.iSourceID = arrActiveAlarms[index].iSourceID THEN
				IF index < iMAX_EVENTS THEN
					MEMCPY(ADR(arrActiveAlarms[index]),ADR(arrActiveAlarms[index+1]),SIZEOF(arrActiveAlarms[1]) * (iActiveAlarms - index));
					MEMSET(ADR(arrActiveAlarms[iActiveAlarms]),0,SIZEOF(arrActiveAlarms[iActiveAlarms]));
					iActiveAlarms := iActiveAlarms - 1;
					EXIT;
				ELSE
					MEMSET(ADR(arrActiveAlarms[iActiveAlarms]),0,SIZEOF(arrActiveAlarms[iActiveAlarms]));
					iActiveAlarms := iActiveAlarms - 1;
				END_IF
			END_IF
		END_FOR
		//alarmy historyczne
		FOR index := 1 TO iMAX_EVENTS DO
			IF  GuidsEqualByVal(stBaseEvent.guidEventClass, arrEvents[index].guidEventClass) AND
				stBaseEvent.iEventId = arrEvents[index].iEventId AND 
				stBaseEvent.sSourceName = arrEvents[index].sSourceName AND 
				stBaseEvent.iSourceID = arrEvents[index].iSourceID THEN
				arrEvents[index].iTimeStampCleared := stBaseEvent.iTimeStamp/10000 - 11644473600000; //100ns to ms -> /1000
				IF NOT bSummertime THEN
					arrEvents[index].iTimeStampCleared := arrEvents[index].iTimeStampCleared + 3600000;
				END_IF
				EXIT;
			END_IF
		END_FOR
	ELSIF stBaseEvent.eEventType = E_EventType.ALARM_CONFIRMED THEN
		FOR index := 1 TO iMAX_EVENTS DO
			IF  GuidsEqualByVal(stBaseEvent.guidEventClass, arrActiveAlarms[index].guidEventClass) AND
				stBaseEvent.iEventId = arrActiveAlarms[index].iEventId AND 
				stBaseEvent.sSourceName = arrActiveAlarms[index].sSourceName AND 
				stBaseEvent.iSourceID = arrActiveAlarms[index].iSourceID THEN
				arrActiveAlarms[index].iTimeStampConfirmed := stBaseEvent.iTimeStamp/10000 - 11644473600000; //100ns to ms -> /1000
				IF NOT bSummertime THEN
					arrActiveAlarms[index].iTimeStampConfirmed := arrActiveAlarms[index].iTimeStampConfirmed + 3600000;
				END_IF
				EXIT;
			END_IF
		END_FOR	
		FOR index := 1 TO iMAX_EVENTS DO
			IF  GuidsEqualByVal(stBaseEvent.guidEventClass, arrEvents[index].guidEventClass) AND
				stBaseEvent.iEventId = arrEvents[index].iEventId AND 
				stBaseEvent.sSourceName = arrEvents[index].sSourceName AND 
				stBaseEvent.iSourceID = arrEvents[index].iSourceID THEN
				arrEvents[index].iTimeStampConfirmed := stBaseEvent.iTimeStamp/10000 - 11644473600000; //100ns to ms -> /1000
				IF NOT bSummertime THEN
					arrEvents[index].iTimeStampConfirmed := arrEvents[index].iTimeStampConfirmed + 3600000;
				END_IF
				EXIT;
			END_IF
		END_FOR	
	END_IF
	
	bReqText := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmCleared" Id="{036602cd-44fc-40d2-99e6-e6b033452290}">
      <Declaration><![CDATA[METHOD OnAlarmCleared
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iActiveDefinitionEvents >= iMAX_DEFINITION_EVENTS THEN
	RETURN; //skip new events
END_IF

MEMCPY(ADR(arrActiveEvents[2]),ADR(arrActiveEvents[1]),SIZEOF(arrActiveEvents[1]) * iActiveDefinitionEvents);
iActiveDefinitionEvents := iActiveDefinitionEvents + 1;
arrActiveEvents[1].iType := 1;
arrActiveEvents[1].guidEventClass := fbEvent.EventClass;
arrActiveEvents[1].eSeverity := fbEvent.eSeverity;
arrActiveEvents[1].iEventId := fbEvent.nEventId;
arrActiveEvents[1].iTimeStamp := fbEvent.nTimestamp;
arrActiveEvents[1].iTcArguments := fbEvent.ipArguments;
arrActiveEvents[1].eEventType := E_EventType.ALARM_CLEARED;
arrActiveEvents[1].sSourceName := fbEvent.ipSourceInfo.sName;
arrActiveEvents[1].iSourceID := fbEvent.ipSourceInfo.nId;
fbEvent.GetJsonAttribute(arrActiveEvents[1].sJsonAttribute, SIZEOF(arrActiveEvents[1].sJsonAttribute));

(* Active events type counter *)
IF arrActiveEvents[1].eSeverity = TcEventSeverity.Verbose THEN
	IF iActiveInfo > 0 THEN
		iActiveInfo := iActiveInfo - 1;	
	ELSE iActiveInfo :=0;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Info THEN
	IF iActiveVerbose > 0 THEN
		iActiveVerbose := iActiveVerbose - 1;	
	ELSE iActiveVerbose := 0;
	END_IF
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Warning THEN
	IF iActiveWarning > 0 THEN
		iActiveWarning := iActiveWarning - 1;		
	ELSE iActiveWarning := 0;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Error THEN
	IF iActiveError > 0 THEN
		iActiveError := iActiveError - 1;		
	ELSE iActiveError :=0;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Critical THEN
	IF iActiveCritical > 0 THEN
		iActiveCritical := iActiveCritical - 1;	
	ELSE iActiveCritical := 0;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmConfirmed" Id="{efe870ed-8bbd-4c42-9405-bf33d81f12d4}">
      <Declaration><![CDATA[METHOD OnAlarmConfirmed
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iActiveDefinitionEvents >= iMAX_DEFINITION_EVENTS THEN
	RETURN; //skip new events
END_IF

MEMCPY(ADR(arrActiveEvents[2]),ADR(arrActiveEvents[1]),SIZEOF(arrActiveEvents[1]) * iActiveDefinitionEvents);
iActiveDefinitionEvents := iActiveDefinitionEvents + 1;
arrActiveEvents[1].iType := 1;
arrActiveEvents[1].guidEventClass := fbEvent.EventClass;
arrActiveEvents[1].eSeverity := fbEvent.eSeverity;
arrActiveEvents[1].iEventId := fbEvent.nEventId;
arrActiveEvents[1].iTimeStamp := fbEvent.nTimestamp;
arrActiveEvents[1].iTcArguments := fbEvent.ipArguments;
arrActiveEvents[1].eEventType := E_EventType.ALARM_CONFIRMED;
arrActiveEvents[1].sSourceName := fbEvent.ipSourceInfo.sName;
arrActiveEvents[1].iSourceID := fbEvent.ipSourceInfo.nId;
fbEvent.GetJsonAttribute(arrActiveEvents[1].sJsonAttribute, SIZEOF(arrActiveEvents[1].sJsonAttribute));

(* Active events type counter *)
IF arrActiveEvents[1].eSeverity = TcEventSeverity.Verbose THEN
	IF iActiveInfo > 0 THEN
		iActiveInfo := iActiveInfo - 1;	
	ELSE 
		iActiveInfo :=0;
	END_IF
		
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Info THEN
	iActiveVerbose := iActiveVerbose - 1;	

ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Warning THEN
	IF iActiveWarning > 0 THEN
		iActiveWarning := iActiveWarning - 1;
	ELSE iActiveWarning := 0;
	END_IF
			

ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Error THEN
	IF iActiveError > 0 THEN
		iActiveError := iActiveError - 1;
	ELSE iActiveError := 0;	
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Critical THEN
	IF iActiveCritical > 0 THEN
		iActiveCritical := iActiveCritical - 1;	
	ELSE iActiveCritical := 0;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAlarmRaised" Id="{1df5b803-888d-4d2d-ab12-93687f9c1a1e}">
      <Declaration><![CDATA[METHOD OnAlarmRaised
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iActiveDefinitionEvents >= iMAX_DEFINITION_EVENTS THEN
	RETURN; //skip new events
END_IF

MEMCPY(ADR(arrActiveEvents[2]),ADR(arrActiveEvents[1]),SIZEOF(arrActiveEvents[1]) * iActiveDefinitionEvents);
iActiveDefinitionEvents := iActiveDefinitionEvents + 1;
arrActiveEvents[1].iType := 1;
arrActiveEvents[1].guidEventClass := fbEvent.EventClass;
arrActiveEvents[1].eSeverity := fbEvent.eSeverity;
arrActiveEvents[1].iEventId := fbEvent.nEventId;
arrActiveEvents[1].iTimeStamp := fbEvent.nTimestamp;
arrActiveEvents[1].iTcArguments := fbEvent.ipArguments;
arrActiveEvents[1].eEventType := E_EventType.ALARM_RAISED;
arrActiveEvents[1].sSourceName := fbEvent.ipSourceInfo.sName;
arrActiveEvents[1].iSourceID := fbEvent.ipSourceInfo.nId;
fbEvent.GetJsonAttribute(arrActiveEvents[1].sJsonAttribute, SIZEOF(arrActiveEvents[1].sJsonAttribute));

(* Active events type counter *)
IF arrActiveEvents[1].eSeverity = TcEventSeverity.Verbose THEN
	iActiveInfo := iActiveInfo + 1;	
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Info THEN
	IF iActiveVerbose < 4294967295 THEN
		iActiveVerbose := iActiveVerbose + 1;	
	ELSE iActiveVerbose := 4294967295;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Warning THEN
	IF iActiveWarning < 4294967295 THEN
		iActiveWarning := iActiveWarning + 1;	
	ELSE iActiveWarning := 4294967295;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Error THEN
	IF iActiveError < 4294967295 THEN
		iActiveError := iActiveError + 1;	
	ELSE iActiveError := 4294967295;
	END_IF
	
ELSIF arrActiveEvents[1].eSeverity = TcEventSeverity.Critical THEN
	IF iActiveCritical < 4294967295 THEN
		iActiveCritical := iActiveCritical + 1;	
	ELSE iActiveCritical := 4294967295;
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnMessageSent" Id="{b4dac56d-cfe9-4434-ae5b-afa117054bdb}">
      <Declaration><![CDATA[METHOD OnMessageSent
VAR_INPUT
	fbEvent : REFERENCE TO FB_TcEvent;
END_VAR

VAR 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iActiveDefinitionEvents >= iMAX_DEFINITION_EVENTS THEN
	RETURN; //skip new events
END_IF

MEMCPY(ADR(arrActiveEvents[2]),ADR(arrActiveEvents[1]),SIZEOF(arrActiveEvents[1]) * iActiveDefinitionEvents);
iActiveDefinitionEvents := iActiveDefinitionEvents + 1;
arrActiveEvents[1].iType := 2;
arrActiveEvents[1].guidEventClass := fbEvent.EventClass;
arrActiveEvents[1].eSeverity := fbEvent.eSeverity;
arrActiveEvents[1].iEventId := fbEvent.nEventId;
arrActiveEvents[1].iTimeStamp := fbEvent.nTimestamp;
arrActiveEvents[1].iTcArguments := fbEvent.ipArguments;
arrActiveEvents[1].eEventType := E_EventType.MESSAGE;
arrActiveEvents[1].sSourceName := fbEvent.ipSourceInfo.sName;
arrActiveEvents[1].iSourceID := fbEvent.ipSourceInfo.nId;
fbEvent.GetJsonAttribute(arrActiveEvents[1].sJsonAttribute, SIZEOF(arrActiveEvents[1].sJsonAttribute));]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_VisuEventsHandling">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VisuEventsHandling.Execute">
      <LineId Id="3" Count="14" />
      <LineId Id="160" Count="0" />
      <LineId Id="18" Count="128" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VisuEventsHandling.OnAlarmCleared">
      <LineId Id="3" Count="19" />
      <LineId Id="40" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="33" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VisuEventsHandling.OnAlarmConfirmed">
      <LineId Id="3" Count="19" />
      <LineId Id="40" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="24" Count="3" />
      <LineId Id="44" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="52" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VisuEventsHandling.OnAlarmRaised">
      <LineId Id="3" Count="22" />
      <LineId Id="41" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="27" Count="1" />
      <LineId Id="46" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_VisuEventsHandling.OnMessageSent">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>